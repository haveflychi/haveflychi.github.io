<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Container on Maxbit Docs</title>
    <link>https://docs.cakepanit.com/docs/ops/container/</link>
    <description>Recent content in Container on Maxbit Docs</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <managingEditor>admin@cakepanit.com (饼铛)</managingEditor>
    <webMaster>admin@cakepanit.com (饼铛)</webMaster>
    <lastBuildDate>Wed, 03 May 2023 22:37:22 +0100</lastBuildDate>
    <atom:link href="https://docs.cakepanit.com/docs/ops/container/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.容器技术所涉及的Linux内核关键技术</title>
      <link>https://docs.cakepanit.com/docs/ops/container/1.%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E6%89%80%E6%B6%89%E5%8F%8A%E7%9A%84linux%E5%86%85%E6%A0%B8%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Wed, 03 May 2023 22:37:22 +0100</pubDate><author>admin@cakepanit.com (饼铛)</author>
      <guid>https://docs.cakepanit.com/docs/ops/container/1.%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E6%89%80%E6%B6%89%E5%8F%8A%E7%9A%84linux%E5%86%85%E6%A0%B8%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/</guid>
      <description>1. 容器技术前世今生 link1.1 1979年 — chroot link 容器技术的概念可以追溯到1979年的UNIX chroot。 它是一套“UNIX操作系统”系统，旨在将其root目录及其它子目录变更至文件系统内的新位置，且只接受特定进程的访问。 这项功能的设计目的在于为每个进程提供一套隔离化磁盘空间。 1982年其被添加至BSD当中。 1.2 2000年 — FreeBSD Jails link FreeBSD Jails是由Derrick T. Woolworth于2000年在FreeBSD研发协会中构建而成的早期容器技术之一。 这是一套“操作系统”系统，与chroot的定位类似，不过其中包含有其它进程沙箱机制以对文件系统、用户及网络等资源进行隔离。 通过这种方式，它能够为每个Jail、定制化软件安装包乃至配置方案等提供一个对应的IP地址。 1.3 2001年 — Linux VServer link Linux VServer属于另一种jail机制，其能够被用于保护计算机系统之上各分区资源的安全(包括文件系统、CPU时间、网络地址以及内存等)。 每个分区被称为一套安全背景(security context)，而其中的虚拟化系统则被称为一套虚拟私有服务器。 1.4 2004年 — Solaris容器 link Solaris容器诞生之时面向x86与SPARC系统架构，其最初亮相于2004年2月的Solaris 10 Build 51 beta当中，随后于2005年正式登陆Solaris 10的完整版本。 Solaris容器相当于将系统资源控制与由分区提供的边界加以结合。各分区立足于单一操作系统实例之内以完全隔离的虚拟服务器形式运行。 1.5 2005年 — OpenVZ link OpenVZ与Solaris容器非常相似，且使用安装有补丁的Linux内核以实现虚拟化、隔离能力、资源管理以及检查点交付。 每套OpenVZ容器拥有一套隔离化文件系统、用户与用户群组、一套进程树、网络、设备以及IPC对象。 1.6 2006年 — Process容器 link Process容器于2006年由谷歌公司推出，旨在对一整套进程集合中的资源使用量(包括CPU、内存、磁盘I/O以及网络等等)加以限制、分配与隔离。 此后其被更名为Control Groups(即控制组)，从而避免其中的“容器”字眼与Linux内核2.6.24中的另一术语出现冲突。这表明了谷歌公司率先重视容器技术的敏锐眼光以及为其做出的突出贡献。 1.7 2007年 — Control Groups linkControl Groups也就是谷歌实现的cgroups，其于2007年被添加至Linux内核当中。&#xA;1.8 2008年 — LXC link LXC指代的是Linux Containers 是第一套完整的Linux容器管理实现方案。 其功能通过cgroups以及Linux namespaces实现。 LXC通过liblxc库进行交付，并提供可与Python3、Python2、Lua、Go、Ruby以及Haskell等语言相对接的API。 相较于其它容器技术，LXC能够在无需任何额外补丁的前提下运行在原版Linux内核之上。 1.</description>
    </item>
  </channel>
</rss>
