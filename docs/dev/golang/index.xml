<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Maxbit Docs</title>
    <link>https://docs.cakepanit.com/docs/dev/golang/</link>
    <description>Recent content in Golang on Maxbit Docs</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <managingEditor>admin@cakepanit.com (饼铛)</managingEditor>
    <webMaster>admin@cakepanit.com (饼铛)</webMaster>
    <lastBuildDate>Fri, 04 Oct 2024 05:06:23 +0800</lastBuildDate>
    <atom:link href="https://docs.cakepanit.com/docs/dev/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.Go的面向对象</title>
      <link>https://docs.cakepanit.com/docs/dev/golang/1.go%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 03 May 2023 22:37:22 +0100</pubDate><author>admin@cakepanit.com (饼铛)</author>
      <guid>https://docs.cakepanit.com/docs/dev/golang/1.go%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>封装 - 工厂模式 link golang的结构体没有构造函数，通常可以使用工厂模式来解决这个问题。 如果包里面的结构体变量首字母小写，引入后，不能直接使用，可以工厂模式解决。 只关心结果，不关心实现过程，因为过程是由封闭的工厂来实现的。 package demo //定义一个结构体 type student struct{ Name string score float64 } // *student返回结构体的指针 func NewStudent(name string, score float64) *student { //外包引用不了，但本包是可以引用的 stu := student{ Name : name, score : score, } return &amp;amp;stu } // 结构体中的score字段也是小写所以需要写一个方法返回 func (s *student) GetScore() float64 { return s.score } func (s *student) SetScore(score float64) { s.score = score } package main import ( &amp;#34;fmt&amp;#34; &amp;#34;go-demo/demo&amp;#34; ) func main() { s := demo.</description>
    </item>
    <item>
      <title>2.Go的并发编程</title>
      <link>https://docs.cakepanit.com/docs/dev/golang/2.go%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Wed, 03 May 2023 22:37:22 +0100</pubDate><author>admin@cakepanit.com (饼铛)</author>
      <guid>https://docs.cakepanit.com/docs/dev/golang/2.go%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid>
      <description>并发介绍 link 并发和并行 并发：本质还是串行 食堂窗口一个大妈（同一时间类只能给一个人打饭） Python 本质没有并行的线程 并行：任务分布在不同 CPU 上，同一时间点同时执行 并行就是有多个食堂大妈，同时给不同人打饭 协程和线程 协程：独立的栈空间，共享堆空间，调度由用户自己控制，本质上有点类似于用户级线程，这些用户级线程的调度也是自己实现的 线程：一个线程上可以跑多个协程，协程是轻量级的线程。 线程和协程最大的区别： 开启一个线程需要大概 2M 空间，而且需要 CPU 调度才能执行，线程会强占 CPU 开启一个协程大概只需要 2K 的空间，而且是由 Go 解释器自己实现的 GPM 调度，主动退出 可以同时启动成千上万个 goroutine 而不会过度占用内存 如果开启成千上万个线程，不仅会大量占用内存，甚至导致机器崩溃；操作系统调度线程也需要耗费大量时间 协程如果需要用 CPU 才会去使用 CPU，如果没有使用 CPU 的需求，它就会主动把 CPU 让给其他协程执行 线程在时间片内，即使不使用 CPU，比如当前正在从磁盘读数据，它也不会让出 CPU goroutine link 多线程编程缺点&#xA;在 Java/C++ 中我们要实现并发编程时，通常需要自己维护一个线程池，并且需要自己去包装一个又一个的任务，同时需要自己去调度线程执行任务并维护上下文切换 goroutine&#xA;Go 语言中的 goroutine 是由 Go 的运行时（runtime）调度和管理的。 Go 程序会智能地将 goroutine 中的任务合理地分配给每个 CPU。 Go 语言之所以被称为现代化的编程语言，就是因为它在语言层面已经内置了调度和上下文切换的机制。 在 Go 语言编程中，你不需要自己写进程、线程、协程，你的技能包里只有一个技能 —— goroutine 当你需要让某个任务并发执行时，只需将该任务包装成一个函数，并开启一个 goroutine 去执行该函数即可。 协程基本使用 link 启动一个协程</description>
    </item>
    <item>
      <title>3.Go常用库</title>
      <link>https://docs.cakepanit.com/docs/dev/golang/3.go%E5%B8%B8%E7%94%A8%E5%BA%93/</link>
      <pubDate>Wed, 03 May 2023 22:37:22 +0100</pubDate><author>admin@cakepanit.com (饼铛)</author>
      <guid>https://docs.cakepanit.com/docs/dev/golang/3.go%E5%B8%B8%E7%94%A8%E5%BA%93/</guid>
      <description>时间库time link package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { now := time.Now() fmt.Printf(&amp;#34;原始时间对象：%s\n&amp;#34;, now) //格式化时间 timePrf := now.Format(&amp;#34;2006-01-02 15:04:05&amp;#34;) fmt.Printf(&amp;#34;格式化时间戳：%s\n&amp;#34;, timePrf) /* output: 原始时间对象：2024-09-26 23:49:32.920331 &amp;#43;0800 CST m=&amp;#43;0.000064395 格式化时间戳：2024-09-26 23:49:32 */ //时间戳 fmt.Printf(&amp;#34;秒时间戳：%v\n&amp;#34;, now.Unix()) fmt.Printf(&amp;#34;毫秒时间戳：%v\n&amp;#34;, now.UnixMilli()) fmt.Printf(&amp;#34;微秒时间戳：%v\n&amp;#34;, now.UnixMicro()) fmt.Printf(&amp;#34;纳秒时间戳：%v\n&amp;#34;, now.UnixNano()) /* output: 秒时间戳：1727365772 毫秒时间戳：1727365772920 微秒时间戳：1727365772920331 纳秒时间戳：1727365772920331000 */ //格式化后的时间（string）转时间对象 loc, _ := time.LoadLocation(&amp;#34;Asia/Shanghai&amp;#34;) inLocation, _ := time.ParseInLocation(&amp;#34;2006-01-02 15:04:05&amp;#34;, timePrf, loc) fmt.Printf(&amp;#34;格式化后的时间字符串转时间对象：%s\n&amp;#34;, inLocation) /* output: 格式化后的时间字符串转时间对象：2024-09-26 23:49:32 &amp;#43;0800 CST */ //获取年月日、时分秒 year := now.</description>
    </item>
    <item>
      <title>4.Go-net-http</title>
      <link>https://docs.cakepanit.com/docs/dev/golang/4.go-net-http/</link>
      <pubDate>Wed, 03 May 2023 22:37:22 +0100</pubDate><author>admin@cakepanit.com (饼铛)</author>
      <guid>https://docs.cakepanit.com/docs/dev/golang/4.go-net-http/</guid>
      <description>net-http介绍 link . ├─ ClientGet │ └── main.go // 发送get请求 ├─ ClientPost │ └── main.go // 发送post请求 ├─ Server │ └── main.go // web服务 Go语言内置的net/http包十分的优秀，提供了HTTP客户端和服务端的实现。&#xA;1.Server/main.go link 客户端 请求信息 封装在http.Request对象中 服务端返回的 响应报文 会被保存在http.Response结构体中 发送给客户端响应的并不是http.Response，而是通过http.ResponseWriter接口来实现的 方法签名 描述 Header() 用户设置或获取响应头信息 Write() 用于写入数据到响应体 WriteHeader() 用于设置响应状态码，若不调用则默认状态码为200 OK。 package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;io&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) // 定义入参结构体 type Data struct { Speak string `json:&amp;#34;speak&amp;#34;` } // 处理get请求 func dealGetReqHandler(w http.ResponseWriter, r *http.Request) { query := r.</description>
    </item>
    <item>
      <title>5.Go-gRPC</title>
      <link>https://docs.cakepanit.com/docs/dev/golang/5.go-grpc/</link>
      <pubDate>Wed, 03 May 2023 22:37:22 +0100</pubDate><author>admin@cakepanit.com (饼铛)</author>
      <guid>https://docs.cakepanit.com/docs/dev/golang/5.go-grpc/</guid>
      <description>1.gRPC 是什么 linkgRPC是google开源的一个RPC框架和库，支持多语言之间的通信。底层通信采用的是 HTTP2 协议。gRPC在设计上使用了 ProtoBuf 这种接口描述语言。这种IDL语言可以定义各种服务，google还提供了一种工具 protoc 来编译这种IDL语言，生成各种各样的语言来操作服务。&#xA;2.gRPC特点 link 定义服务简单，可以很快的搭建出一个RPC调度的服务 gRPC是与语言无关，平台无关的。你定义好了一个protobuf协议，就可以用protoc生成不同语言的协议框架 使用HTTP2协议，支持双向流。客户端和服务端可以双向通信 3.RPC与RESTful区别是什么 link 在客户端和服务端通信还有一种基于http协议的 RESTful 架构模式，RESTful一般是对于资源的操作，它是名词（资源地址），然后添加一些动作对这些资源进行操作。而RPC是基于函数，它是动词。 RPC一般基于TCP协议，当然gRPC是基于HTTP2，但它也是比HTTP协议更加有效率和更多特性。RESTful一般都是基于HTTP协议。 传输方面：自定义的TCP协议或者使用HTTP2协议，报文体积更小，所以传输效率更高，RESTful一般基于http协议，报文体积大。 gRPC用的是protobuf的IDL语言，会编码为二进制协议的数据，而RESTful一般是用json的数据格式，所以json格式的编解码更耗时。 4.gRPC通信流程 link 客户端(gRPC Stub)调用A方法，发起RPC调用 对请求信息使用Protobuf进行对象序列化压缩（IDL） 服务端（gPRC Server)接收到请求后，解码请求体，进行业务逻辑处理并返回。 对响应结果使用Protobuf进行对象序列化压缩（IDL） 客户端接受到服务端响应，解码请求体。回调被调用的A方法，唤醒正在等待响应（阻塞）的客户端调用并返回响应结果 5.gRPC环境安装 link5.1安装 protobuf link从官方仓库：https://github.com/google/protobuf/releases 下载适合你平台的预编译好的二进制文件（protoc-&amp;lt;version&amp;gt;-&amp;lt;platform&amp;gt;.zip）。&#xA;适用Windows 64位protoc-3.20.1-win64.zip 适用于Mac Intel 64位protoc-3.20.1-osx-x86_64.zip 适用于Mac ARM 64位protoc-3.20.1-osx-aarch_64.zip 适用于Linux 64位protoc-3.20.1-linux-x86_64.zip 将下载的zip解压到指定位置，这里以mac系统为例 fei@feideMBP protoc % pwd /usr/local/protoc fei@feideMBP protoc % tree -L 2 ./ ./ ├── bin │ └── protoc └── include ├── github.com └── google 5 directories, 1 file fei@feideMBP protoc % protoc --version libprotoc 3.</description>
    </item>
    <item>
      <title>6.Go-Gin</title>
      <link>https://docs.cakepanit.com/docs/dev/golang/6.go-gin/</link>
      <pubDate>Wed, 03 May 2023 22:37:22 +0100</pubDate><author>admin@cakepanit.com (饼铛)</author>
      <guid>https://docs.cakepanit.com/docs/dev/golang/6.go-gin/</guid>
      <description>1.Gin介绍 link Gin 是一个高性能的Go语言Web框架，封装比较优雅，API友好，源代码比较明确。具有快速灵活，容错方便等特点。 其实对于golang而言，web框架的依赖远比Python，Java之类的要小。自身的net/http足够简单，性能也非常不错。 框架更像是一个常用函数或者工具的集合。借助框架开发，不仅可以省去很多常用的封装带来的时间，也有助于团队的编码风格和形成规范。 Gin官网:Gin Github&#xA;2.Gin第一个应用 link package main import ( &amp;#34;github.com/gin-gonic/gin&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { //实例化gin对象 ginSer := gin.Default() //定义路由：当使用 GET 方法访问路径为 /api/gin-test 时，执行回调函数 ginSer.GET(&amp;#34;/api/gin-test&amp;#34;, func(c *gin.Context) { //在回调函数中，返回一个字符串 &amp;#34;hello, go&amp;#34; 并设置HTTP状态码为200 OK c.String(http.StatusOK, &amp;#34;Hello Gin&amp;#34;) }) ginSer.Run(&amp;#34;:8000&amp;#34;) } 2.1测试 link //启动服务端 fei@feideMBP test % go run main.go [GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached. [GIN-debug] [WARNING] Running in &amp;#34;debug&amp;#34; mode.</description>
    </item>
  </channel>
</rss>
